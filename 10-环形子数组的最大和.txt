给定一个由整数数组 A 表示的环形数组 C，求 C 的非空子数组的最大可能和。

示例 1：
输入：[1,-2,3,-2]
输出：3
解释：从子数组 [3] 得到最大和 3

示例 2：
输入：[5,-3,5]
输出：10
解释：从子数组 [5,5] 得到最大和 5 + 5 = 10

示例 3：
输入：[3,-1,2,-1]
输出：4
解释：从子数组 [2,-1,3] 得到最大和 2 + (-1) + 3 = 4

示例 4：
输入：[3,-2,2,-3]
输出：3
解释：从子数组 [3] 和 [3,-2,2] 都可以得到最大和 3

示例 5：
输入：[-2,-3,-1]
输出：-1
解释：从子数组 [-1] 得到最大和 -1

1.简单易懂的解题
前置知识 最大子序和。
会了最大子序和，这题也就明白了。
对于环形数组，分两种情况。
(1)答案在数组中间，就是最大子序和。例如[1,-2,3,-2]；
(2)答案在数组两边，例如[5,-3,5]最大的子序和就等于数组的总和SUM-最小的子序和。
(一种特殊情况是数组全为负数，也就是SUM-最小子序和==0，最大子序和等于数组中最大的那个)。

class Solution {
public:
    int maxSubarraySumCircular(vector<int>& nums) {
        int sum=nums[0];
        vector<int>dpmax(nums);
        vector<int>dpmin(nums);
        for(int i=1;i<nums.size();i++){
            dpmax[i]=max(dpmax[i-1]+nums[i],nums[i]);
            dpmin[i]=min(dpmin[i-1]+nums[i],nums[i]);
            sum+=nums[i];
        }
        int maxv=*max_element(dpmax.begin(),dpmax.end());
        int minv=*min_element(dpmin.begin(),dpmin.end());
        return max(maxv,sum-minv==0?maxv:sum-minv);
    }
};


2.
需要维持三个参数： 总和sum， 和最大值，和最小值
考虑两种情况
子序列在中间，就是最大值即可
子序列在两边，那么就是 (sum-和最小值)
这里存在边缘情况，如果数值都是负数，那么要取“和最大值”的最大值, 即负数里的最小值就是最大值。

class Solution {
public:
    int maxSubarraySumCircular(vector<int>& nums) {
        int n = nums.size();
        //这里用一个变量就可以实现循环计算包含当前值（nums[i]）的和的最大值和最小值
        int lastMax = nums[0];
        int lastMin = nums[0];
        int sum = nums[0];
        //保持全局的和的最大值和最小值
        int maxMax = nums[0];
        int minMin = nums[0];

        for(int i = 1;i < n;i++){
            lastMax = max(lastMax + nums[i],nums[i]);
            maxMax = max(maxMax,lastMax);
            lastMin = min(lastMin + nums[i],nums[i]);
            minMin = min(minMin,lastMin);
            sum = sum + nums[i];
        }

        return max(maxMax,sum - minMin == 0 ? (maxMax) : (sum - minMin));
    }
};