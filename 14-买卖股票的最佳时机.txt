给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。
设计一个算法来计算你所能获取的最大利润。
返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。

示例 1：
输入：[7,1,5,3,6,4]
输出：5
解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
          注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。

示例 2：
输入：prices = [7,6,4,3,1]
输出：0
解释：在这种情况下, 没有交易完成, 所以最大利润为 0。

1.
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans = 0;
        vector<int>St;
        prices.emplace_back(-1);//哨兵
        for(int i = 0;i < prices.size();i++){
            while(!St.empty() && St.back() > prices[i]){//维护单调栈
                ans = std::max(ans,St.back() - St.front());//维护最大值
                St.pop_back();
            }
            St.emplace_back(prices[i]);
        }

        return ans;
    }
};

2.暴力法
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int Max = 0;
        for(int i = 0;i < n;i++){
            for(int j = i + 1;j < n;j++){
                if(prices[i] < prices[j]){
                    Max = max(Max,prices[j] - prices[i]);
                }
            }
        }
        return Max;
    }
};

3.动态规划
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int inf = 1e9;
        int minprice = inf;
        int maxprofit = 0;
        for(int price:prices){
            maxprofit = max(maxprofit,price - minprice);
            minprice = min(price,minprice);
        }
        return maxprofit;
    }
};

4.万能框架法
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int dp_i_0 = 0;
        int dp_i_1 = INT_MIN;
        for(int i = 0;i < n;i++){
            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i]);
            dp_i_1 = max(dp_i_1, -prices[i]);
        }
        return dp_i_0;
    }
};
