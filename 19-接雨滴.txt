给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。

示例 1：
输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]
输出：6
解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。


1.暴力法
直接按问题描述进行。对于数组中的每个元素，
我们找出下雨后水能达到的最高位置，等于两边最大高度的较小值减去当前高度的值。

class Solution {
public:
    int trap(vector<int>& height) {
        int ans = 0;
        int n = height.size();
        for(int i = 1;i < n - 1;i++){
            int max_left = 0;
            int max_right = 0;
            for(int j = i;j >= 0;j--){
                max_left = max(max_left,height[j]);
            }
            for(int j = i;j < n;j++){
                max_right = max(max_right,height[j]);
            }
            ans = ans + min(max_left,max_right) - height[i];
        }
        return ans;
    }
};

2.动态规划
class Solution {
public:
    int trap(vector<int>& height) {
        if(height.empty()){
            return 0;
        }
        int ans = 0;
        int size = height.size();
        vector<int>left_max(size),right_max(size);
        left_max[0] = height[0];
        for(int i = 1;i < size;i++){
            left_max[i] = max(height[i],left_max[i - 1]);
        }
        right_max[size - 1] = height[size - 1];
        for(int i = size - 2;i >= 0;i--){
            right_max[i] = max(height[i],right_max[i + 1]);
        }
        for(int i = 1;i < size - 1;i++){
            ans = ans + min(left_max[i],right_max[i]) - height[i];
        }
        return ans;

    }
};