给你一个正整数数组 values，其中 values[i] 表示第 i 个观光景点的评分，
并且两个景点 i 和 j 之间的 距离 为 j - i。
一对景点（i < j）组成的观光组合的得分为 values[i] + values[j] + i - j ，
也就是景点的评分之和 减去 它们两者之间的距离。
返回一对观光景点能取得的最高分。


示例 1：
输入：values = [8,1,5,2,6]
输出：11
解释：i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11

示例 2：
输入：values = [1,2]
输出：2

1.动态规划
我们回过头来看得分公式，我们可以将其拆分成 values[i]+i 和values[j]−j 两部分，
这样对于统计景点j答案的时候，由于 values[j]−j 是固定不变的，
因此最大化values[i]+i+values[j]−j 的值其实就等价于求 [0,j-1]中 values[i]+i 的最大值mx，
景点j的答案即为mx+values[j]−j 。而mx 的值我们只要从前往后遍历j的时候同时维护即可，
这样每次遍历到景点j的时候，寻找使得得分最大的i就能从O(n)降至 O(1)的时间复杂度，
总时间复杂度就能从 O(n^2)降至O(n)降至 。

class Solution {
public:
    int maxScoreSightseeingPair(vector<int>& values) {
         int ans = 0;
         int mx = values[0] + 0;
         for(int j = 1;j < values.size();++j){
             ans = max(ans,mx + values[j] - j);
             //边遍历边维护
             mx = max(mx,values[j]  + j);
         }
         return ans;
    }
};
