给你一个字符串 s 和一个字符串列表 wordDict 作为字典，
判定 s 是否可以由空格拆分为一个或多个在字典中出现的单词。
说明：拆分时可以重复使用字典中的单词。

示例 1：
输入: s = "leetcode", wordDict = ["leet", "code"]
输出: true
解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。

示例 2：
输入: s = "applepenapple", wordDict = ["apple", "pen"]
输出: true
解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。
        注意你可以重复使用字典中的单词。

示例 3：
输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
输出: false

1.背包思想
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string>wordSet(wordDict.begin(),wordDict.end());
        vector<bool>dp(s.size() + 1,false);
        dp[0] = true;
        for(int i = 1;i <= s.size();i++){//遍历背包
           for(int j = 0;j < i;j++){//遍历物品
              string word = s.substr(j,i - j);//substr(起始位置，截取的个数)
              if(wordSet.find(word) != wordSet.end() && dp[j]){
                  dp[i] = true;
              }
           }
        }
        return dp[s.size()];
    }
};

2.
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        vector<bool>dp(s.size() + 1);
        dp[0] = true;
        for(int i = 1; i <= s.size();i++){
            for(auto& word : wordDict){
                int sz = word.size();
                if(i - sz >= 0 && s.substr(i - sz,sz) == word){
                    dp[i] = dp[i] || dp[i - sz];
                }
            }
        }
        return dp[s.size()];
    }
};